name: deploy-console
run-name: "console → ${{ inputs.environment }} @ ${{ inputs.ref || 'main' }} (${{ inputs.mode || 'plan+apply' }})"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        type: choice
        options: [dev]                 # add 'prod' when ready
        required: true
      mode:
        description: "What to run"
        type: choice
        options: [plan, plan+apply, apply]
        default: plan+apply
      ref:
        description: "Tag or commit SHA (default: main)"
        required: false

jobs:
  plan:
    name: Plan (${{ inputs.environment }})
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    defaults: { run: { working-directory: apps/console } }
    outputs:
      artifact_name: ${{ steps.mkname.outputs.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { ref: ${{ inputs.ref && inputs.ref || 'main' }} }

      - name: Configure AWS credentials (plan role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_PLAN_ROLE_ARN }}     # can be same ARN as deploy role
          aws-region: ${{ vars.AWS_REGION || 'ap-southeast-2' }}
          role-session-name: plan-console-${{ inputs.environment }}

      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.9.5 }

      - name: Init backend
        if: ${{ inputs.mode != 'apply' }}
        env: { TF_IN_AUTOMATION: "true" }
        run: terraform init -reconfigure -backend-config=envs/${{ inputs.environment }}/backend-config.hcl

      - name: Validate
        if: ${{ inputs.mode != 'apply' }}
        run: terraform validate

      - name: Terraform plan
        if: ${{ inputs.mode != 'apply' }}
        env:
          TF_IN_AUTOMATION: "true"
          TF_VAR_release_ref: ${{ inputs.ref || github.sha }}
        run: |
          terraform plan \
            -var-file=envs/${{ inputs.environment }}/variables.tfvars \
            -out=apply.tfplan
          terraform show -no-color apply.tfplan > plan.${{ inputs.environment }}.txt

      - name: Name artifact
        id: mkname
        run: echo "name=console-${{ inputs.environment }}-plan" >> "$GITHUB_OUTPUT"

      - name: Upload plan artifacts
        if: ${{ inputs.mode == 'plan' || inputs.mode == 'plan+apply' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.mkname.outputs.name }}
          path: |
            apps/console/apply.tfplan
            apps/console/plan.${{ inputs.environment }}.txt

      - name: Summary
        run: |
          {
            echo "### Terraform **${{ inputs.mode }}** — console / \`${{ inputs.environment }}\`"
            echo "- Version: \`${{ inputs.ref || github.sha }}\`"
            if [ "${{ inputs.mode }}" != "apply" ]; then
              echo ""
              echo "<details><summary>Show plan (first 400 lines)</summary>"
              echo
              echo '```'
              sed -n '1,400p' plan.${{ inputs.environment }}.txt || true
              echo '```'
              echo
              echo "Full plan attached as artifact."
              echo "</details>"
            else
              echo ""
              echo "_No plan generated (mode=apply)._"
            fi
          } >> $GITHUB_STEP_SUMMARY

  apply:
    name: Apply (${{ inputs.environment }})
    needs: [plan]
    if: ${{ inputs.mode != 'plan' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}         # 🔐 approval gate (prod will pause here)
    permissions: { id-token: write, contents: read }
    concurrency:
      group: terraform-console-${{ inputs.environment }}
    defaults: { run: { working-directory: apps/console } }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { ref: ${{ inputs.ref && inputs.ref || 'main' }} }

      - name: Configure AWS credentials (deploy role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}             # Environment secret (per env)
          aws-region: ${{ vars.AWS_REGION || 'ap-southeast-2' }}
          role-session-name: apply-console-${{ inputs.environment }}

      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.9.5 }

      - name: Init backend
        env: { TF_IN_AUTOMATION: "true" }
        run: terraform init -reconfigure -backend-config=envs/${{ inputs.environment }}/backend-config.hcl

      # plan+apply → apply the saved, reviewed plan
      - name: Download plan artifact
        if: ${{ inputs.mode == 'plan+apply' }}
        uses: actions/download-artifact@v4
        with:
          name: console-${{ inputs.environment }}-plan
          path: apps/console

      - name: Apply reviewed plan
        if: ${{ inputs.mode == 'plan+apply' }}
        env: { TF_IN_AUTOMATION: "true" }
        run: terraform apply -input=false -auto-approve apply.tfplan

      # apply-only → apply directly with tfvars (no saved plan)
      - name: Apply (no saved plan)
        if: ${{ inputs.mode == 'apply' }}
        env:
          TF_IN_AUTOMATION: "true"
          TF_VAR_release_ref: ${{ inputs.ref || github.sha }}
        run: terraform apply -auto-approve -var-file=envs/${{ inputs.environment }}/variables.tfvars

      - name: Save deploy metadata
        if: always()
        run: |
          printf '{"app":"console","env":"%s","ref":"%s","time":"%s"}\n' \
            "${{ inputs.environment }}" "${{ inputs.ref || github.sha }}" "$(date -u +%FT%TZ)" > deploy-metadata.json

      - name: Upload deploy metadata
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: console-deploy-metadata-${{ inputs.environment }}
          path: apps/console/deploy-metadata.json
